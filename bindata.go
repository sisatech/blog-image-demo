// Code generated by go-bindata.
// sources:
// web/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x56\x5f\x6f\xdb\x46\x0c\x7f\xf7\xa7\x60\xb4\x0d\x91\x91\xfa\xe4\xa4\x28\x30\xd8\x92\x81\xae\x0d\xb6\x0c\x59\x5b\x60\xc1\x80\x61\xd8\xc3\x59\xa2\x25\xba\x27\xdd\xed\x8e\x72\x6d\x0c\xfe\xee\x85\x2c\xcb\x56\xe2\x7f\x0a\x5f\x64\xd1\x24\x7f\xe4\x8f\xe4\xe9\xc2\xab\x8f\x9f\x3f\x3c\xfd\xfd\xe5\x1e\x32\xce\xd5\xa4\x17\xd6\x8f\x5e\x98\xa1\x4c\x26\x3d\xd8\x4a\x98\x23\x4b\x88\x33\x69\x1d\x72\xe4\x95\x3c\x1b\xfc\xec\xb5\xfe\x66\x62\x85\x93\xbf\xb4\x65\x24\x05\x1f\x31\xd7\x61\x50\xeb\xf6\x36\x2e\xb6\x64\x18\x9c\x8d\x23\x2f\x63\x36\x6e\x14\x04\x72\x2e\x97\x22\xd5\x3a\x55\x28\x0d\x39\x11\xeb\x7c\xa3\x0b\x14\x4d\x5d\x30\xff\xaf\x44\xbb\x0a\xde\x8a\x3b\x71\xbb\x7d\x11\x39\x15\x62\xee\xbc\x49\x18\xd4\xf1\x26\xbd\x30\xa8\x73\xed\x85\x53\x9d\xac\x5a\x80\x09\x2d\x20\x56\xd2\xb9\xc8\xf3\xc0\xf1\x4a\x61\xe4\x19\x99\x24\x54\xa4\x23\x18\x9a\x25\xdc\x0d\x7f\x6a\x9e\xe3\x56\x35\xbb\x00\xd9\x6d\xe3\xc6\xb8\xe4\x81\x54\x94\x16\xa3\x18\x0b\x46\x3b\xf6\x9e\x55\x0b\xef\x8d\x09\x83\xec\xf6\x48\x10\x73\x2e\xc6\x81\x79\x23\x4f\x19\x39\x90\xc6\x00\xcb\xaf\xe8\x80\x33\x04\x63\xf5\x82\x12\x4c\x80\x72\x99\xa2\x03\x59\x24\x95\x2e\x46\xe7\x6a\x8b\x1c\xa8\x00\xd6\x20\xa7\x8e\xad\x8c\x19\x16\x18\xb3\xb6\x5b\x7b\x71\x12\xeb\x4b\x1d\x84\x8a\x14\x8a\x32\x47\xab\x4b\x57\xfb\xc0\x8c\x14\x3a\xc8\xe5\x6a\x93\x06\x38\x9d\x23\x30\xe5\x78\x18\x2b\x0c\xcc\x91\xda\x4b\x05\x94\x44\x1e\xe5\xe9\x40\x91\xe3\x5d\x17\x72\xb9\x1c\x64\x48\x69\xc6\xa3\xbb\x77\x43\xb3\x1c\x83\x5e\xa0\x9d\x29\xfd\x6d\xb0\x1a\xc9\x92\x75\x45\xcd\x11\x8c\x52\x1d\xeb\x92\x6d\xf5\x3c\x48\x68\xf1\x62\x04\xaa\x0c\x18\x5b\xe8\x9d\x1a\x11\x52\x9e\x36\xc9\x7b\x20\x15\xb7\x86\xa8\x95\x3e\xbc\x1b\x2e\xb2\xb1\x17\x9c\x4e\x61\x3b\xf6\xbc\x32\x5b\xe8\x60\x2e\x17\xb2\xd6\x1e\xc1\xfd\xd1\x4f\x74\x5c\xe6\x58\x70\x5f\x58\x94\xc9\xca\x9f\x95\x45\xcc\xa4\x0b\xbf\x0f\xff\x1f\x92\xd2\x48\x63\x05\x16\x67\x16\x5d\xf6\x48\x8e\x37\x1e\xa7\x1c\x76\x80\xa2\x5a\x38\xff\xb2\x61\x23\x55\x25\x23\xb8\xfe\xf5\xfe\xe9\xfa\x4d\x67\xa7\xd2\xaa\x11\x5c\x07\xd2\x50\x60\x28\xe6\xd2\xa2\xbb\xbe\xe8\xbc\xee\x8b\x44\x17\xb8\x67\x20\x91\x2c\xfb\xdd\x33\x35\xd5\x71\xf5\x50\x4d\xf2\x86\x8d\xdf\xff\xfc\xfc\x49\x6c\x74\x75\xa0\xfe\xb8\x43\x06\x27\x4d\xd6\xa7\x7b\xf1\xac\x05\xa7\x41\x1c\xf2\x43\x35\x7e\x0b\xa9\xfc\x96\xcb\x1b\x78\x3b\x1c\x0e\x8f\xf8\xad\xfb\x87\x90\xbb\xb6\xbf\xa8\x75\x53\xe0\xb9\x79\x51\xc8\x50\x2a\x88\xa0\x19\x37\x91\x22\xdf\x2b\xac\x7e\xfe\xb2\x7a\x48\xfc\xfd\xd6\x9e\xe6\xe0\x5b\x46\x0a\xfd\x52\x89\x4c\xba\x0f\x19\xa9\xe4\x93\x4e\xd0\xf9\xfd\x2e\x73\x57\x2a\x61\x31\xd7\x0b\xdc\x38\x56\x41\x94\x74\xbc\x79\x39\xc3\xd9\x19\xd6\x67\xda\x82\x4f\x10\xc1\x70\x0c\x04\x21\x54\x14\x08\x85\x45\xca\xd9\x18\xe8\xe6\xa6\xc3\xe0\x54\xa4\xe8\xe9\xbc\x62\x45\xb2\xfc\x87\xfe\xed\xe4\xa1\xa8\x4d\x63\x6c\x51\x32\x6e\x99\xf4\xbd\xc7\x87\x33\xfc\x35\x42\x33\xf0\xf5\x74\x5e\x2f\x3c\x5c\x45\xc0\xb6\xc4\x2e\x24\xee\xd2\x20\x41\x45\x81\xf6\xb7\xa7\x3f\x1e\x21\xaa\x6a\x10\x85\xcc\x11\x6e\xc0\x03\xdf\xec\xce\x77\x21\x44\xdf\xbb\x3c\xf4\x80\xca\xe1\x6b\xd0\x91\x41\x9e\xe1\xe0\x7d\x07\x0a\x1a\x91\x22\xb3\x38\x8b\xbc\x1f\xae\x2e\x27\xba\xf7\x39\x56\xfc\x6b\xc8\xd3\x45\xac\x28\xfe\x0a\x11\x3c\x3b\x6d\xbb\x46\x68\x24\xd6\x85\xd3\x0a\x85\xd2\xa9\x5f\x7f\x73\x3a\x9c\x31\x2f\xe5\xdc\x42\x7a\x7d\xe1\x6c\x0c\x11\x78\x81\x07\x37\xbb\x52\xbb\x83\xac\xbb\x9b\x2a\x12\xd2\x18\x2c\x92\x7a\x41\xe5\xe5\x1e\xae\xbb\x2c\x7d\x3b\xa6\xa2\x73\xe7\xeb\xa1\xa6\xf5\x91\xdd\xdf\xfe\xea\x5b\x5f\x75\x0d\xdc\x5c\x5d\xbf\x07\x00\x00\xff\xff\x22\xb2\x9c\x77\xd2\x0a\x00\x00")

func webIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webIndexHtml,
		"web/index.html",
	)
}

func webIndexHtml() (*asset, error) {
	bytes, err := webIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/index.html", size: 2770, mode: os.FileMode(420), modTime: time.Unix(1513050861, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/index.html": webIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

